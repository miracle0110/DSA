#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
};


Node* createNode(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->left = newNode->right = nullptr;
    return newNode;
}


Node* insert(Node* root, int value) {
    if (root == nullptr)
        return createNode(value);

    if (value < root->data)
        root->left = insert(root->left, value);
    else if (value > root->data)
        root->right = insert(root->right, value);

    return root;
}


int longestPath(Node* root) {
    if (root == nullptr)
        return 0;

    return 1 + max(longestPath(root->left), longestPath(root->right));
}


int minValue(Node* root) {
    Node* current = root;
    while (current->left != nullptr)
        current = current->left;
    return current->data;
}


void swapLeftRight(Node* root) {
    if (root == nullptr)
        return;

    // Swap left and right pointers
    Node* temp = root->left;
    root->left = root->right;
    root->right = temp;

    // Recursively swap in the left and right subtrees
    swapLeftRight(root->left);
    swapLeftRight(root->right);
}

// Function to search for a value in BST
bool search(Node* root, int value) {
    if (root == nullptr)
        return false;

    if (root->data == value)
        return true;
    else if (value < root->data)
        return search(root->left, value);
    else
        return search(root->right, value);
}

// Function to display menu options
void displayMenu() {
    cout << "\nMENU:\n";
    cout << "1. Insert a new node\n";
    cout << "2. Find number of nodes in longest path from root\n";
    cout << "3. Find minimum data value in the tree\n";
    cout << "4. Swap left and right pointers at every node\n";
    cout << "5. Search a value\n";
    cout << "6. Exit\n";
    cout << "Enter your choice: ";
}

int main() {
    Node* root = nullptr;
    int choice, value;

    do {
        displayMenu();
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                root = insert(root, value);
                break;
            case 2:
                cout << "Number of nodes in longest path from root: " << longestPath(root) << endl;
                break;
            case 3:
                cout << "Minimum value in the tree: " << minValue(root) << endl;
                break;
            case 4:
                swapLeftRight(root);
                cout << "Left and right pointers swapped at every node.\n";
                break;
            case 5:
                cout << "Enter value to search: ";
                cin >> value;
                if (search(root, value))
                    cout << value << " found in the tree." << endl;
                else
                    cout << value << " not found in the tree." << endl;
                break;
            case 6:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}
