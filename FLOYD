#include <iostream>
using namespace std;
#define INF 999
#define V 4
void printSolution(int dist[][V],int n);

void floydWarshall(int dist[][V],int n) {
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][k] != INF && dist[k][j] != INF && dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
    printSolution(dist, n);
}

void printSolution(int dist[][V], int n) {
    cout << "\nThis matrix shows the minimum distances between vertices: " << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (dist[i][j] == INF) {
                cout << "INF ";
            } else {
                cout << dist[i][j] << "   ";
            }
        }
        cout << endl;
    }
}

int main() {
    
    int graph[V][V];
    cout << "Enter the adjacency matrix for the graph (999 for no edge):" << endl;
    for (int i = 0; i < V; i++) {
         cout<<"Enter the elements of "<<i+1<<" Row "<<endl;
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
       
    }

    floydWarshall(graph, V);
    return 0;
}
